#!/usr/bin/env bash

set -e

# Variables
VAR_DIR=/var/lib/lxc-nextdom
ETC_DIR=/etc/lxc-nextdom
LXC_DIR=/var/lib/lxc

# Arguments
usage() { echo "Usage: $0
  [-h <help>]
  [-n <container name (default: lxc-nextdom)>]

  [-p <product type :
            'empty'   : Create an empty container

        Nextdom:
            'nextdom' : Nextdom stable [default]
            'nextdom-dev' : Nextdom on dev repos
            'nextdom-nightly' : Nextdom nightly build
             or any text : Nextdom development version with a branch/pr name

        InfludDB and Grafana :
            'influxdb' : InfluxDB database
            'grafana' : Grafana
            'nextdom2influxdb' : Gateway between Nextdom and InfluxDB

        Other product:
            'jeedom'  : Jeedom stable (yes!)
            'mosquitto' : Mosquitto MQTT server
            'motioneye' : MotionEye CCTV solutions
            'openvpn-server' : OpenVPN server
            'wetty' : WeTTY web terminal
            'zm_reco' : Zoneminder and Facial reco
  ]
  [-d <Linux distribution (a Debian or Ubuntu distro name : stretch, buster, xenial, ... - Default=buster)>]
  [-i <container IP (CIDR format, ex. 192.168.1.100/24 - Empty=DHCP )>]
  [-r yes <replace container>]

  # Nextdom parameter:
  [-b <backupfile to restore inside container (full path to restore or leave empty to detect last backup on current host and copy inside container)>]

  # MQTT Broker parameters:
  [-m <MQTT broker IP>]
  [-u <MQTT broker username>]
  [-v <MQTT broker password>]

" 1>&2; exit 1; }

while getopts ":h:n:p:d:i:r:b:m:u:v:" option; do
    case "${option}" in
        h)
            usage
            ;;
        n)
            LXC_NAME=${OPTARG}
            ;;
        p)
            PRODUCT_NAME=${OPTARG}
            ;;
        d)
            DEB_VERSION=${OPTARG}
            ;;
        i)
            LXC_CIDR=${OPTARG}
            ;;
        r)
            LXC_REPLACE=${OPTARG}
            ;;
        b)
            NEXTDOM_BACKUP=${OPTARG}
            ;;
        m)
            MQTT_IP=${OPTARG}
            ;;
        u)
            MQTT_USER=${OPTARG}
            ;;
        v)
            MQTT_PASS=${OPTARG}
            ;;
        *)
            usage
            exit -1
            ;;
    esac
done
shift $((OPTIND-1))

LXC_NAME=${LXC_NAME:-"test"}
PRODUCT_NAME=${PRODUCT_NAME:-"empty"}
DEB_VERSION=${DEB_VERSION:-"buster"}

#echo $LXC_NAME
#echo $PRODUCT_NAME
#echo $LXC_CIDR
#echo $LXC_REPLACE

ROOT_CONTAINER=${LXC_DIR}/${LXC_NAME}


# -----------------------------------------------------------------------------
print_log_in() {
    txt=$1
    printf "${txt}"
}


print_log_ok() {
    echo " OK"
}

# -----------------------------------------------------------------------------


# Test if root user
if [ $(id -u) != 0 ] ; then
    print_log_in "\n<F> Les droits de super-utilisateur (root) sont requis pour installer le LXC NextDom"
    print_log_in "\nVeuillez lancer sudo $0 ou connectez-vous en tant que root, puis relancez $0\n"
    exit 1
fi


# Get current directory
set_root() {
    local this=`readlink -n -f $1`
    root=`dirname $this`
}
set_root $0


# Check Debian/Ubuntu version
if [ "${PRODUCT_NAME}" == "wetty" ] && [ ! "${DEB_VERSION}" == "xenial" ] ; then
    echo "<I> For Wetty, switch to Ubuntu Xenial container"
    DEB_VERSION="xenial"
fi

#if [ "${PRODUCT_NAME}" == "veolia-idf" ] && [ ! "${DEB_VERSION}" == "zesty" ] ; then
#    echo "<I> For Veolia-idf, switch to Ubuntu Zesty container"
#    DEB_VERSION="zesty"
#fi

if [ "${PRODUCT_NAME}" == "veolia-idf" ] && [ ! "${DEB_VERSION}" == "buster" ] ; then
    echo "<I> For Veolia-idf, switch to Debian Buster container"
    DEB_VERSION="buster"
fi

if [ "${PRODUCT_NAME}" == "motioneye" ] && [ ! "${DEB_VERSION}" == "buster" ] ; then
    echo "<I> For MotionEye, switch to Debian Buster container"
    DEB_VERSION="buster"
fi

if [ "${PRODUCT_NAME}" == "zm_reco" ] ; then
    if [ ! "${DEB_VERSION}" == "stretch" ] ; then
        echo "<I> For ZM, switch to Stretch container"
        DEB_VERSION="stretch"
    fi
    if [ -z ${LXC_CIDR} ] ; then
        echo "<F> For ZM, you need to fix IP, please add -i switch"
        exit 1
    fi
    if [ -z ${MQTT_IP} ] ; then
        echo "<F> For ZM, you need MQTT IP, please add -m switch"
        exit 1
    fi
    if [ -z ${MQTT_USER} ] ; then
        echo "<F> For ZM, you need MQTT user, please add -u switch"
        exit 1
    fi
    if [ -z ${MQTT_PASS} ] ; then
        echo "<F> For ZM, you need MQTT password, please add -v switch"
        exit 1
    fi
fi


if [ "${DEB_VERSION}" == "stretch" ] || [ "${DEB_VERSION}" == "buster" ] ; then
    DISTRO_TYPE="debian"
elif [ "${DEB_VERSION}" == "xenial" ] || [ "${DEB_VERSION}" == "bionic" ] || [ "${DEB_VERSION}" == "zesty" ] || [ "${DEB_VERSION}" == "focal" ] ; then
    DISTRO_TYPE="ubuntu"
else
    echo "<F> Error : don't know Deb version : ${DEB_VERSION} !"
    exit 1
fi


#echo $PRODUCT_NAME
#echo $DISTRO_TYPE
#echo $DEB_VERSION

#exit 0

# Test if backup file exists
if [ ! -z ${NEXTDOM_BACKUP} ] ; then
    if [ -f "${NEXTDOM_BACKUP}" ] ; then
        backupfile=${NEXTDOM_BACKUP}
        needbackup="1"
    else
        print_log_in "\n<A> Missing backup file : ${NEXTDOM_BACKUP}\n"
        exit 1
    fi
fi


# Test if backup is needed
if [ -z ${NEXTDOM_BACKUP} ] ; then
    if [ ! "${PRODUCT_NAME}" == "empty" ] ; then
        if [ "${PRODUCT_NAME}" == "nextdom" ] || [ "${PRODUCT_NAME}" == "jeedom" ] || [ ! -f "${ETC_DIR}/bin/install_${PRODUCT_NAME}.sh" ] ; then
            needbackup="1"
        else
            needbackup="0"
        fi
    else
        needbackup="0"
    fi
fi


# -----------------------------------------------------------------------------

step_verify_missing_packages() {
    ## Install missing packages (lxc, ...) ##
    LIST=""
    for PKG in lxc \
               bridge-utils \
               debootstrap \
; do
        if ! dpkg-query -W -f='${Status}' ${PKG} | grep "ok installed"; then LIST="${PKG} ${LIST}" ; fi
    #
    done
    #
    if [ ! "${LIST}" = "" ] ; then
        print_log_in "\n<F> Missing Debian package : ${LIST}\n"
        exit 1
    fi
}


step_bootstrap_lxc() {
    ## Download and boostrap LXC container ##
    # Test if container already exists
    if [[ -d "${ROOT_CONTAINER}/rootfs" ]]; then
        if [ ! -z ${LXC_REPLACE} ] ; then
            print_log_in "\n<F> Container ${ROOT_CONTAINER} already exists! Erasing!\n"
            set +e
            lxc-stop -n ${LXC_NAME}
            set -e
            lxc-destroy -n ${LXC_NAME}
        else
            print_log_in "\n<F> Container ${ROOT_CONTAINER} already exists! Stopping! Please add '-r yes' to replace\n"
            exit 1
        fi
    fi
    #
    mkdir -p ${ROOT_CONTAINER}
    #
    if [ -f /usr/share/doc/lxc/examples/lxc-macvlan.conf ] ; then
        # Debian 9
        template="/usr/share/doc/lxc/examples/lxc-macvlan.conf"
        echo "<I> Launch : lxc-create -n ${LXC_NAME} -t ${DISTRO_TYPE} -f ${template} -P ${LXC_DIR}  -- -r ${DEB_VERSION}"
        lxc-create -n ${LXC_NAME} -t ${DISTRO_TYPE} -f ${template} -P ${LXC_DIR}  -- -r ${DEB_VERSION}
    else
        echo "<I> lxc-create -t download -n ${LXC_NAME} -- --dist ${DISTRO_TYPE} --release ${DEB_VERSION} --arch amd64"
        lxc-create -t download -n ${LXC_NAME} -- --dist ${DISTRO_TYPE} --release ${DEB_VERSION} --arch amd64
    fi
    #
}


step_generate_mac() {
    #SEED=$(basename ${root})
    SEED="$(ls -a /tmp/ | tail -1)-${LXC_NAME}"
    OID="00:16:3e"
    RAND=$(echo ${SEED} | md5sum | sed 's/\(..\)\(..\)\(..\).*/\1:\2:\3/')
    MAC="$OID:$RAND"
}


step_get_gateway() {
    GA=$(ip route | grep default | head -1 | awk -F" " '{print $3}')
    GATEWAY=${GA:-"192.168.x.x"}
}


step_save_list() {
    conf=${VAR_DIR}/list
    #
    if [[ -f "${conf}" ]] ; then rm -f ${conf} ; fi
    touch ${conf}
    chmod 600 ${conf}
    echo "rootdir=${root}" >> ${conf}
    echo "root_container=${root_container}" >> ${conf}
    echo "name_container=${name_container}" >> ${conf}
    echo "interface=${ETH}" >> ${conf}
}


step_prepare_config() {
    configold=${ROOT_CONTAINER}/config.old
    config=${ROOT_CONTAINER}/config
    if [[ -f "${configold}" ]] ; then rm -f ${configold} ; fi
    if [[ -f "${config}" ]] ; then cp -ax ${config} ${configold} ; fi
    sleep 1 &&
    #
    # Hack for some Linux distro (like Ubuntu 16.04) that do not setup network in container config file!
    if [ -z "$(grep "^lxc.network.type " ${config})" ] && [ -z "$(grep "^lxc.net.0.type" ${config})" ] ; then
        if [ -z "$(grep "^lxc.network.type" ${config})" ] ; then echo "lxc.network.type = macvlan" >>${config} ; fi
        if [ -z "$(grep "^lxc.network.flags" ${config})" ] ; then echo "lxc.network.flags = up" >>${config} ; fi
        if [ -z "$(grep "^lxc.network.link" ${config})" ] ; then echo "lxc.network.link = eth0" >>${config} ; fi
        if [ -z "$(grep "^lxc.network.hwaddr" ${config})" ] ; then echo "lxc.network.hwaddr = 4a:49:43:49:79:bd" >>${config} ; fi
        if [ -z "$(grep "^lxc.network.ipv4" ${config})" ] ; then echo "lxc.network.ipv4 = 10.2.3.4/24" >>${config} ; fi
    fi
    #
    # LXC 2.x (Debian 9, Ubuntu 16.04, ...)
    if [ ! -z "$(grep "^lxc.network.type " ${config})" ] ; then

        # Change bridged interface
        sed -i 's/^lxc.network.type.*/lxc.network.type = macvlan/g' ${config}
        sed -i 's/^lxc.network.link.*/lxc.network.link = ndlan0/g' ${config}
        #
        # Comment ipv4 if DHCP mode or setup IP
        if [ -z ${LXC_CIDR} ] ; then
            sed -i 's/^lxc.network.ipv4/#lxc.network.ipv4/g' ${config}
            sed -i "/^#lxc.network.ipv4/a #lxc.network.ipv4.gateway = ${GATEWAY}" ${config}
        else
            if [ -z "$(grep "^lxc.network.ipv4 " ${config})" ] ; then
			    echo "lxc.network.ipv4 = ${LXC_CIDR}" >>${config}
            else
                sed -i "s#^lxc.network.ipv4.*#lxc.network.ipv4 = ${LXC_CIDR}#g" ${config}
            fi
            if [ -z "$(grep "^lxc.network.ipv4.gateway " ${config})" ] ; then
                echo "lxc.network.ipv4.gateway = ${GATEWAY}" >>${config}
            else
                sed -i "/^lxc.network.ipv4.address /a lxc.network.ipv4.gateway = ${GATEWAY}" ${config}
            fi
            sed -i 's/^auto eth0/#auto eth0/g' ${ROOT_CONTAINER}/rootfs/etc/network/interfaces
            sed -i 's/^iface eth0/#iface eth0/g' ${ROOT_CONTAINER}/rootfs/etc/network/interfaces
        fi
        #
        # Suppress ipv6 compatibility
        sed -i 's/^lxc.network.ipv6/#lxc.network.ipv6/g' ${config}
        echo "net.ipv6.conf.all.disable_ipv6 = 1" >> ${ROOT_CONTAINER}/rootfs/etc/sysctl.conf
        #
        # Change MAC
        sed -i "s/^lxc.network.hwaddr.*/lxc.network.hwaddr = ${MAC}/g" ${config}
        #
        # Macvlan Bridged (allow container to contact other containers - but not the host! see http://noyaudolive.net/2012/2012/05/09/lxc-and-macvlan-host-to-guest-connection/)
        echo "lxc.network.macvlan.mode = bridge" >>${config}
        #

    # LXC 3.x (Ubuntu 18.04, ...)
    elif [ ! -z "$(grep "^lxc.net.0.type " ${config})" ] ; then

        # Change bridged interface
        sed -i 's/^lxc.net.0.type.*/lxc.net.0.type = macvlan/g' ${config}
        sed -i 's/^lxc.net.0.link.*/lxc.net.0.link = ndlan0/g' ${config}

        # Comment ipv4 if DHCP mode or setup IP
        if [ -z ${LXC_CIDR} ] ; then
            sed -i 's/^lxc.net.0.ipv4.address/#lxc.net.0.ipv4.address/g' ${config}
            sed -i "/^lxc.net.0.ipv4.address/a #lxc.net.0.ipv4.gateway = ${GATEWAY}" ${config}
        else
            if [ -z "$(grep "^lxc.net.0.ipv4.address " ${config})" ] ; then
                echo "lxc.net.0.ipv4.address = ${LXC_CIDR}" >>${config}
            else
                sed -i "s#^lxc.net.0.ipv4.address .*#lxc.net.0.ipv4.address = ${LXC_CIDR}#g" ${config}
            fi
            if [ -z "$(grep "^lxc.net.0.ipv4.gateway " ${config})" ] ; then
                echo "lxc.net.0.ipv4.gateway = ${GATEWAY}" >>${config}
            else
                sed -i "/^lxc.net.0.ipv4.address /a lxc.net.0.ipv4.gateway = ${GATEWAY}" ${config}
            fi
            sed -i 's/^auto eth0/#auto eth0/g' ${ROOT_CONTAINER}/rootfs/etc/network/interfaces
            sed -i 's/^iface eth0/#iface eth0/g' ${ROOT_CONTAINER}/rootfs/etc/network/interfaces
        fi
        #
        # Suppress ipv6 compatibility
        sed -i 's/^lxc.net.0.ipv6/#lxc.net.0.ipv6/g' ${config}
        echo "net.ipv6.conf.all.disable_ipv6 = 1" >> ${ROOT_CONTAINER}/rootfs/etc/sysctl.conf
        #
        # Change MAC
        sed -i "s/^lxc.net.0.hwaddr.*/lxc.net.0.hwaddr = ${MAC}/g" ${config}
        #
        # Macvlan Bridged (allow container to contact other containers - but not the host! see http://noyaudolive.net/2$
        echo "lxc.net.0.macvlan.mode = bridge" >>${config}
    else
        config_error=1
        echo "<F> Error : can't get Linux ditro type! Please adjust manually ${config} and run 'lxc-start -n ${LXC_NAME}' !"
        exit 1
    fi
    #
    # Add pre script
    echo "lxc.hook.pre-start = /etc/lxc-nextdom/bin/lxc_network_start.sh" >>${config}
    echo "#lxc.hook.post-stop = " >>${config}
    #
    # Autostart container
    echo "lxc.start.auto = 1" >>${config}
    #
    # OpenVPN (for Unprivileged containers)
    mkdir -p ${ROOT_CONTAINER}/rootfs/dev/net
    mknod ${ROOT_CONTAINER}/rootfs/dev/net/tun c 10 200
    #echo "lxc.mount.entry = /dev/net/tun ${ROOT_CONTAINER}/rootfs/dev/net/tun none bind create=file" >>${config}
    echo "lxc.cgroup.devices.allow = c 10:200 rwm" >>${config}
    echo 'lxc.hook.autodev = sh -c "modprobe tun; cd ${LXC_ROOTFS_MOUNT}/dev; mkdir net; mknod net/tun c 10 200; chmod 0666 net/tun"' >>${config}
    #
    # Add container hostname in /etc/hosts
    echo "127.0.1.1       ${LXC_NAME}"  >> ${ROOT_CONTAINER}/rootfs/etc/hosts
    #
    # Copy last jeedom/nextdom backup from host if exists (and if needeed)
    if [ "${needbackup}" == "1" ] ; then
        backupfile=""
        if [ ! -z ${NEXTDOM_BACKUP} ] ; then
            if [ -f "${NEXTDOM_BACKUP}" ] ; then
                backupfile=${NEXTDOM_BACKUP}
            fi
        fi
        #
        if [ -z ${NEXTDOM_BACKUP} ] ; then
            if [ -d "/var/www/html/backup" ] ; then
                backupfile=$(ls -atr /var/www/html/backup/backup* 2>/dev/null | tail -1) >/dev/null 2>/dev/null
            fi
            if [ -d "/var/lib/nextdom/backup" ] ; then
                if [ -z ${backupfile} ] ; then
                    backupfile=$(ls -atr /var/lib/nextdom/backup/backup* 2>/dev/null | tail -1) >/dev/null 2>/dev/null
               fi
           fi
        fi
        #
        if [ -f "${backupfile}" ] ; then
            mkdir -p ${ROOT_CONTAINER}/rootfs/var/lib/nextdom/backup
            chmod 755 ${ROOT_CONTAINER}/rootfs/var/lib/nextdom/backup
            cp -ax ${backupfile} ${ROOT_CONTAINER}/rootfs/var/lib/nextdom/backup
            if [ ${needbackup} = "0" ] ; then
			    print_log_in "\n<I> Backup file copied. You can restore it from Nextdom web interface.\n"
            fi
		fi
    fi
    # Copy special files inside container
    if [ -d "${ETC_DIR}/bin/base/${DEB_VERSION}" ] ; then
        mkdir -p ${ROOT_CONTAINER}/rootfs/root/tmp/install/base/
        cp -ax ${ETC_DIR}/bin/base/${DEB_VERSION}/* ${ROOT_CONTAINER}/rootfs/root/tmp/install/base/
    fi
    #
    if [ -d "${ETC_DIR}/bin/${PRODUCT_NAME}" ] ; then
        mkdir -p ${ROOT_CONTAINER}/rootfs/root/tmp/install/
        cp -ax ${ETC_DIR}/bin/${PRODUCT_NAME}/* ${ROOT_CONTAINER}/rootfs/root/tmp/install/
    fi
    #
    # Add container in file list
    if [ ! -d "${VAR_DIR}" ]; then mkdir -p ${VAR_DIR} ; fi
    listcont="${VAR_DIR}/list"
    isok=""
    set +e
    if [ -f ${listcont} ] ; then
        isok=$(grep "^${LXC_NAME}$" ${listcont})
    fi
    if [ -z ${isok} ] ; then
        echo ${LXC_NAME} >> ${listcont}
    fi
    set -e
}


step_start_container() {

    # Start container
    echo "<I> Launch : lxc-start -n ${LXC_NAME}"
    lxc-start -n ${LXC_NAME}
    #
    # Hack for /etc/resolv.conf (can be empty for some Linux distro like Ubuntu 18.04)
    resolv_file=${ROOT_CONTAINER}/rootfs/etc/resolv.conf
    if [ -L ${resolv_file} ] ; then
        rm -f ${resolv_file}
    fi
    #
    if [ ! -f ${resolv_file} ] ; then
        echo "$(grep nameserver /etc/resolv.conf) 8.8.8.8" >${resolv_file}
        #echo "nameserver 8.8.8.8" >${resolv_file}
    else
        if [ ! -s "$_file" ] ; then
            echo "$(grep nameserver /etc/resolv.conf) 8.8.8.8" >${resolv_file}
            #echo "nameserver 8.8.8.8" >${resolv_file}
        fi
    fi
    #
    # Launch preinst.sh script inside container
    if [ -f "${ROOT_CONTAINER}/rootfs/root/tmp/install/base/preinst.sh" ] ; then
        chmod 755 ${ROOT_CONTAINER}/rootfs/root/tmp/install/base/preinst.sh
        sleep 2
        echo "lxc-attach -n ${LXC_NAME} -- bash -x /root/tmp/install/base/preinst.sh"
        lxc-attach -n ${LXC_NAME} -- bash -x /root/tmp/install/base/preinst.sh
    fi
    #
    # Install Product inside container
    if [ ! "${PRODUCT_NAME}" == "empty" ] ; then
        if [ ! -f ${ETC_DIR}/bin/install_${PRODUCT_NAME}.sh ] || [ "${PRODUCT_NAME}" == "nextdom" ] ; then
            cp -ax ${ETC_DIR}/bin/install_nextdom.sh ${ROOT_CONTAINER}/rootfs/root/install.sh
            arg="${PRODUCT_NAME}"
        else
            cp -ax ${ETC_DIR}/bin/install_${PRODUCT_NAME}.sh ${ROOT_CONTAINER}/rootfs/root/install.sh
            arg=""
        fi

        #
        # Specific parameters for Zoneminder
        if [ "${PRODUCT_NAME}" == "zm_reco" ] ; then
	        sed -i "s/^MQTT_IP=.*/MQTT_IP=$MQTT_IP/g" ${ROOT_CONTAINER}/rootfs/root/install.sh
	        sed -i "s/^MQTT_USER=.*/MQTT_USER=$MQTT_USER/g" ${ROOT_CONTAINER}/rootfs/root/install.sh
	        sed -i "s/^MQTT_PASS=.*/MQTT_PASS=$MQTT_PASS/g" ${ROOT_CONTAINER}/rootfs/root/install.sh
        fi

        #
        # Specific parameters for Mosquiotto
        if [ "${PRODUCT_NAME}" == "mosquitto" ] ; then
	        sed -i "s/^MQTT_USER=.*/MQTT_USER=$MQTT_USER/g" ${ROOT_CONTAINER}/rootfs/root/install.sh
	        sed -i "s/^MQTT_PASS=.*/MQTT_PASS=$MQTT_PASS/g" ${ROOT_CONTAINER}/rootfs/root/install.sh
        fi

        #
        chmod 755 ${ROOT_CONTAINER}/rootfs/root/install.sh
        sleep 1

        #
		# Launch installation script inside contaniner
        echo "lxc-attach -n ${LXC_NAME} -- bash -x /root/install.sh ${arg}"
        lxc-attach -n ${LXC_NAME} -- bash -x /root/install.sh ${arg}
    fi

    #
    # Launch postinst.sh script inside container
    if [ -f "${ROOT_CONTAINER}/rootfs/root/tmp/install/base/postinst.sh" ] ; then
        chmod 755 ${ROOT_CONTAINER}/rootfs/root/tmp/install/base/postinst.sh
        sleep 1
        echo "lxc-attach -n ${LXC_NAME} -- bash -x /root/tmp/install/base/postinst.sh"
        lxc-attach -n ${LXC_NAME} -- bash -x /root/tmp/install/base/postinst.sh
    fi
    #
    # Show IP adress
    ip=$(lxc-info -n ${LXC_NAME} -iH)
    if [ -z "${ip}" ] ; then
        sleep 1
        ip=$(lxc-info -n ${LXC_NAME} -iH)
    fi
    if [ -z "${ip}" ] ; then
        sleep 2
        ip=$(lxc-info -n ${LXC_NAME} -iH)
    fi
    if [ -z "${ip}" ] ; then
        sleep 3
        ip=$(lxc-info -n ${LXC_NAME} -iH)
    fi
    #
    if [ -z "${ip}" ] ; then
        echo ">>>>> Error ! Can't get container IP ! <<<<<"
    else
        #
        set +e
        #ipbridged=""
        #ipbridged=$(echo )

        set -e
        #
        if [ ! "${PRODUCT_NAME}" == "empty" ] ; then
            if [ "${PRODUCT_NAME}" == "nextdom" ] || [ "${PRODUCT_NAME}" == "jeedom" ] || [ ! -f "${ETC_DIR}/bin/install_${PRODUCT_NAME}.sh" ] ; then
                echo "\n\n>>>>> Open Nextdom Website (http or https) with IP: ${ip} <<<<<\n\n"
            else
               echo "\n\n>>>>> Container IP: ${ip} <<<<<\n\n"
            fi
        else
            echo "\n\n>>>>> Container IP: ${ip} <<<<<\n\n"
        fi
    fi
}




# ======================================================================

print_log_in "step_verify_missing_packages ... "
step_verify_missing_packages
print_log_ok

print_log_in "step_bootstrap_lxc ..."
step_bootstrap_lxc
print_log_ok

print_log_in "step_generate_mac ..."
step_generate_mac
print_log_ok

print_log_in "step_get_gateway ..."
step_get_gateway
print_log_ok

print_log_in "step_prepare_config ..."
step_prepare_config
print_log_ok

print_log_in "step_start_container ..."
step_start_container
print_log_ok
